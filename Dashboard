<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>CK Farm to School Dashboard</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <!-- Leaflet CSS (no integrity attributes) -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />

  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #f9f7f4;
      color: #333;
      margin: 0;
      padding: 0;
    }
    .container {
      margin-top: 1rem;
      margin-bottom: 3rem;
    }
    /* Welcome Modal */
    #welcome-modal {
      position: fixed;
      z-index: 9999;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: rgba(0,0,0,0.5);
      display: flex;
      justify-content: center;
      align-items: center;
    }
    #welcome-modal .modal-content {
      background: rgba(255,255,255,0.95);
      border-radius: 10px;
      padding: 2rem;
      max-width: 600px;
      text-align: center;
    }
    #welcome-modal h1 {
      font-size: 1.8rem;
      color: #4d784e;
      margin-bottom: 1rem;
    }
    #welcome-modal p {
      font-size: 1rem;
      line-height: 1.6;
    }
    /* Filter Panel */
    .filter-panel {
      background: #fff;
      padding: 1rem;
      margin-bottom: 1rem;
      border-radius: 8px;
      box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }
    /* Map Container */
    #map {
      height: 400px;
      border: 2px solid #ddd;
      border-radius: 8px;
      margin-bottom: 1rem;
    }
    /* Table Container */
    .table-container {
      margin-bottom: 2rem;
    }
    /* Toggle Button */
    .toggle-btn {
      background-color: #4d784e;
      color: #fff;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 5px;
    }
    .toggle-btn.active {
      background-color: #3f6240;
    }
  </style>
</head>
<body>

<!-- Welcome Modal -->
<div id="welcome-modal">
  <div class="modal-content">
    <!-- Replace this placeholder logo URL with your own if desired -->
    <img src="https://placehold.co/150x100?text=CK+Logo" alt="CK Logo" class="img-fluid mb-3">
    <h1>Welcome to CK Farm to School Project</h1>
    <p>
      Thank you for exploring Conscious Kitchen’s (CK) Farm to School Project. This dashboard and map allow you to explore organic strawberry farms and school districts in California—helping to connect school meal programs to local organic farms.
      <br><br>
      In addition to farm details and contacts, you can find information on school districts and food service directors. 
      <strong>We encourage you to explore CK verified farms</strong> as these are farmers we have worked with and recommend.
    </p>
    <button id="close-modal" class="btn btn-success mt-3">Explore Dashboard</button>
  </div>
</div>

<div class="container">
  <!-- Filter Panel -->
  <div class="filter-panel">
    <div class="row">
      <div class="col-md-4 mb-2">
        <input id="search-county" type="text" class="form-control" placeholder="Search by County">
      </div>
      <div class="col-md-4 mb-2">
        <input id="search-school" type="text" class="form-control" placeholder="Search by School District">
      </div>
      <div class="col-md-4 mb-2">
        <select id="radius-select" class="form-control">
          <option value="999999">All Distances</option>
          <option value="50">Within 50 miles</option>
          <option value="150">Within 150 miles</option>
          <option value="200">Within 200 miles</option>
        </select>
      </div>
    </div>
    <div class="row mt-2">
      <div class="col-md-6 mb-2">
        <label>Strawberry Acreage (min): <span id="acreage-value">0</span></label>
        <input id="acreage-slider" type="range" class="form-control-range" min="0" max="500" value="0">
      </div>
      <div class="col-md-6 mb-2 text-right">
        <!-- Button toggles: Show Only CK Verified / Show All Farms -->
        <button id="toggle-ck" class="toggle-btn">Show Only CK Verified Farms</button>
      </div>
    </div>
  </div>

  <!-- Map -->
  <div id="map"></div>

  <!-- Organic Strawberry Farms Table -->
  <div class="table-container">
    <h2>Organic Strawberry Farms</h2>
    <table id="farm-table" class="table table-striped table-bordered">
      <thead class="thead-dark">
        <tr>
          <th>Farm Name</th>
          <th>CK Verified</th>
          <th>Contact</th>
          <th>Phone</th>
          <th>Email</th>
          <th>Strawberry Acreage</th>
          <th>GAP Certification</th>
          <th>Logistics</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- School Districts Table -->
  <div class="table-container">
    <h2>School Districts</h2>
    <table id="school-table" class="table table-striped table-bordered">
      <thead class="thead-dark">
        <tr>
          <th>FSD Name</th>
          <th>FSD Email</th>
          <th>FSD Phone #</th>
          <th>FSD Extension</th>
          <th>Student Population</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>
</div>

<!-- Scripts -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
<!-- Papa Parse for CSV loading -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.2/papaparse.min.js"></script>
<!-- Leaflet JS (no integrity) -->
<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>

<script>
  /***** GLOBAL DATA *****/
  let farmsData = [];
  let schoolDistrictsData = [];
  let dataLoadCount = 0;

  // We'll show ALL farms by default
  let showOnlyCK = false;

  /***** LOAD CSV FILES *****/
  Papa.parse("FarmData.csv", {
    download: true,
    header: true,
    dynamicTyping: true,
    complete: function(results) {
      farmsData = results.data.map(row => ({
        County: row["County"] || "",
        FarmName: row["Farm Name"] || "",
        CKVerified: (row["CK Verified"] || "").toLowerCase(), // "yes"/"no"
        Contact: row["Contact"] || "",
        Phone: row["Phone"] || "",
        Email: row["Email"] || "",
        StrawberryAcreage: parseFloat(row["Strawberry Acerage"]) || 0,
        GAPCertification: row["GAP Certified"] || "",
        Latitude: parseFloat(row["Latitude"]) || 0,
        Longitude: parseFloat(row["Longitude"]) || 0,
        Logistics: "" // placeholder
      }));
      onDataLoaded();
    },
    error: function(err) {
      console.error("Error loading FarmData.csv:", err);
    }
  });

  Papa.parse("FoodServices.csv", {
    download: true,
    header: true,
    dynamicTyping: true,
    complete: function(results) {
      schoolDistrictsData = results.data.map(row => ({
        County: row["County"] || "",
        FSDName: row["FSD Name"] || "",
        FSDEmail: row["FSD Email"] || "",
        FSDPhone: row["FSD Phone #"] || "",
        FSDExtension: row["FSD Extension"] || "",
        StudentPopulation: row["Student Population"] || ""
      }));
      onDataLoaded();
    },
    error: function(err) {
      console.error("Error loading FoodServices.csv:", err);
    }
  });

  function onDataLoaded() {
    dataLoadCount++;
    if (dataLoadCount === 2) {
      // Both CSVs loaded
      updateDashboard();
    }
  }

  /***** DOM ELEMENTS *****/
  const welcomeModal = document.getElementById('welcome-modal');
  const closeModalBtn = document.getElementById('close-modal');
  const searchCountyInput = document.getElementById('search-county');
  const searchSchoolInput = document.getElementById('search-school');
  const radiusSelect = document.getElementById('radius-select');
  const acreageSlider = document.getElementById('acreage-slider');
  const acreageValueDisplay = document.getElementById('acreage-value');
  const toggleCKBtn = document.getElementById('toggle-ck');
  const farmTableBody = document.querySelector('#farm-table tbody');
  const schoolTableBody = document.querySelector('#school-table tbody');

  /***** EVENT LISTENERS *****/
  closeModalBtn.addEventListener('click', () => {
    welcomeModal.style.display = 'none';
  });

  searchCountyInput.addEventListener('input', updateDashboard);
  searchSchoolInput.addEventListener('input', updateDashboard);
  radiusSelect.addEventListener('change', updateDashboard);
  acreageSlider.addEventListener('input', () => {
    acreageValueDisplay.textContent = acreageSlider.value;
    updateDashboard();
  });
  toggleCKBtn.addEventListener('click', () => {
    showOnlyCK = !showOnlyCK;
    toggleCKBtn.classList.toggle('active', showOnlyCK);
    toggleCKBtn.textContent = showOnlyCK
      ? "Show All Farms"
      : "Show Only CK Verified Farms";
    updateDashboard();
  });

  /***** DISTANCE CALCULATION (HAVERSINE) *****/
  function toRad(x) { return x * Math.PI / 180; }
  function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 3958.8; // miles
    const dLat = toRad(lat2 - lat1);
    const dLon = toRad(lon2 - lon1);
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
              Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c;
  }

  // Approx center of California
  const searchCenter = { lat: 36.7783, lon: -119.4179 };

  /***** LEAFLET MAP INIT *****/
  let map, markerGroup;
  document.addEventListener('DOMContentLoaded', () => {
    map = L.map('map').setView([searchCenter.lat, searchCenter.lon], 6);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);
    markerGroup = L.layerGroup().addTo(map);
  });

  function updateMapMarkers(filteredFarms) {
    if (!markerGroup) return;
    markerGroup.clearLayers();
    filteredFarms.forEach(farm => {
      if (farm.Latitude && farm.Longitude) {
        const marker = L.marker([farm.Latitude, farm.Longitude])
          .bindPopup(`
            <strong>${farm.FarmName}</strong><br>
            CK Verified: ${farm.CKVerified}<br>
            Acreage: ${farm.StrawberryAcreage}
          `);
        markerGroup.addLayer(marker);
      }
    });
  }

  /***** UPDATE DASHBOARD *****/
  function updateDashboard() {
    // Filter farms
    let filteredFarms = farmsData.filter(farm => {
      // Must have a non-zero acreage
      const hasAcreage = farm.StrawberryAcreage > 0;

      // CK Verified toggle
      const ckVal = farm.CKVerified || "";
      const ckMatch = showOnlyCK ? ckVal.includes("yes") : true;

      // County search
      const countyMatch = farm.County
        .toLowerCase()
        .includes(searchCountyInput.value.toLowerCase());

      // School search (using County as a proxy or could be expanded)
      const schoolSearch = searchSchoolInput.value.toLowerCase();
      const schoolMatch = !schoolSearch || farm.County.toLowerCase().includes(schoolSearch);

      // Radius
      const radiusVal = parseFloat(radiusSelect.value);
      const distance = calculateDistance(
        searchCenter.lat, searchCenter.lon,
        farm.Latitude, farm.Longitude
      );
      const radiusMatch = (radiusVal === 999999) || (distance <= radiusVal);

      // Acreage slider
      const minAcre = parseFloat(acreageSlider.value);
      const acreageMatch = farm.StrawberryAcreage >= minAcre;

      return hasAcreage && ckMatch && countyMatch && schoolMatch && radiusMatch && acreageMatch;
    });

    // Sort: CK Verified first, then Strawberry Acreage descending
    filteredFarms.sort((a, b) => {
      const aCK = a.CKVerified.includes("yes");
      const bCK = b.CKVerified.includes("yes");
      if (aCK && !bCK) return -1;
      if (!aCK && bCK) return 1;
      return b.StrawberryAcreage - a.StrawberryAcreage;
    });

    // Populate Farms Table
    farmTableBody.innerHTML = "";
    filteredFarms.forEach(farm => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${farm.FarmName}</td>
        <td>${farm.CKVerified}</td>
        <td>${farm.Contact}</td>
        <td>${farm.Phone}</td>
        <td>${farm.Email}</td>
        <td>${farm.StrawberryAcreage}</td>
        <td>${farm.GAPCertification}</td>
        <td>${farm.Logistics}</td>
      `;
      farmTableBody.appendChild(tr);
    });

    // Update Map
    updateMapMarkers(filteredFarms);

    // School Districts: filter by county
    let filteredSchools = schoolDistrictsData.filter(sd => {
      return sd.County.toLowerCase().includes(searchCountyInput.value.toLowerCase());
    });

    // Populate School Table
    schoolTableBody.innerHTML = "";
    filteredSchools.forEach(sd => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${sd.FSDName}</td>
        <td>${sd.FSDEmail}</td>
        <td>${sd.FSDPhone}</td>
        <td>${sd.FSDExtension}</td>
        <td>${sd.StudentPopulation}</td>
      `;
      schoolTableBody.appendChild(tr);
    });
  }
</script>
</body>
</html>
